#random.seed=1234567
run.name=tspsw
run.reset=true

# If set to "true" then substitutions present in property values will be enabled. Substitutions have the format $([key]), where [key] is the key of another property.
substitution.enable=true

###########
# evolution
###########
num.runs=1
num.generations=100000
popul.size=1024

performance.target=0.01
performance.target.type=lower
# If greater than 1 then use an average of the best performance over this many generations.
performance.target.average=10

#false means mutation probabilities are applied to all possible places a mutation could occur
#true means probabilities apply to individual as a whole; only one topological mutation can occur per individual
#note that this applies only to topological mutations, not weight mutations
topology.mutation.classic=true

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.03
add.neuron.mutation.rate=0.03

# Mutation rate for operator that adds neurons anywhere in the network (as 
# opposed to regular add neuron operator that only adds them in place of 
# existing connections). Only works for topology.mutation.classic=false
add.neuron.anywhere.mutation.rate=0.0

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.4
add.connection.mutation.rate=0.1
#[0.01, 0.3]
remove.connection.mutation.rate=0.01
#only remove weights with magnitude smaller than this
remove.connection.max.weight=1000

#should be 1.0
prune.mutation.rate=1.0

#[0.1, 0.8]
weight.mutation.rate=0.1
#[1.0, 2.0] dependent on (CPPN) weight.max/min?
weight.mutation.std.dev=1
# The amount to perturb weights by when generating the initial population. Default is weight.mutation.std.dev
#weight.mutation.std.dev.initial=0.01

#percent of individuals used as parents
survival.rate=0.4
#proportion of sexual (crossover) versus asexual reproduction.
crossover.proportion=0.5
# the probability that an individual produced by the crossover operator will be a candidate for having mutations applied to it (independent of other mutation probabilities).
crossover.mutate.probability=0

#[1, 5]
selector.elitism.min.specie.size=10
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.05
#min number to select from a species (if it has size >= selector.elitism.min.specie.size)
selector.elitism.min.to.select=1
selector.roulette=false
selector.min.generations=10
selector.max.stagnant.generations=250
selector.speciated.fitness=true


############
# speciation
############
speciation.class=com.anji.neat.SpeciationStrategyKMeans

#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=2
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=2
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=1.0

#compatibility threshold [0.1, 4.0], relative to c#
#speciation.threshold=2.3
#speciation.target=32
#speciation.threshold.change=0.05


##################
# fitness function
##################
fitness_function.class=com.ojcoleman.ahni.experiments.TSPSuperimposedWaves
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=0

#fitness.function.multi.class=com.ojcoleman.ahni.evaluation.mocostfunctions.BainNNConnectionCountCost
#fitness.function.multi.weighting=0.9999, 0.0001
#fitness.function.multi.probability=0

#experiment specific

# The seed to use for the RNG to generate the network. Comment out to use seed based on current time.
#fitness.function.tspsw.seed=

# The number of waves to superimpose.
fitness.function.tspsw.wave.count=2

# The amount to increase the number of waves by when environments with the current value have been sufficiently mastered
# (see {@link #DIFFICULTY_INCREASE_PERFORMANCE}. If the value is followed by an "x" then the value is considered a
# factor (and so should be > 1). If a factor >= 1 is supplied then the wave count will always be increased by at least 1.
fitness.function.tspsw.wave.count.delta=0

# Comma-separated list of available types of waves. These are selected at random when generating environments. 
# Valid values are sine, square, triangle and saw. Default is sine only.
fitness.function.tspsw.wave.types=sine

# The evaluation method to use. Either 'reproduce' (the network must continue to produce the signal during 
# the evaluation phase) or 'predict' (the network must predict the signal value 
# fitness.function.tspsw.evaluation.predict.lookahead steps ahead).  
fitness.function.tspsw.evaluation.type=reproduce

# When fitness.function.tspsw.evaluation.type = 'predict', the number of time steps ahead that the network must
# predict the signal value for.  
#fitness.function.tspsw.evaluation.predict.lookahead=8
	
# The length of the learning phase.
fitness.function.tspsw.phase.learn.length=384

# The length of the evaluation phase.
fitness.function.tspsw.phase.evaluation.length=48

# The performance indicating when the environment difficulty should be increased as the current difficulty has been
# sufficiently mastered.
fitness.function.tspsw.difficulty.increase.performance=0.97

# The number of environments to evaluate candidates against. Increasing this will provide a more accurate
# evaluation but take longer.
fitness.function.tspsw.environment.count=1

# The fraction of environments that should be replaced with new environments per generation. This is evaluated
# probabilistically.
fitness.function.tspsw.environment.replacerate=0

# Factor to increase the total number of environments by when the current environment(s) have been 
# sufficiently mastered (see fitness.function.tspsw.difficulty.increase.performance). May be fractional; if the factor is 
# greater than 1 then the number of environments will be increased by at least 1. Default is 1 (no change).
fitness.function.tspsw.environment.count.increase=2

# If fitness.function.tspsw.environment.count.increase is greater than 1, then this is the maximum number of 
# environments to increase to. Default is 128.
fitness.function.tspsw.environment.count.max=128

# If true enables novelty search for which behaviours are defined by the output of the system for the last  
# iterations in the final trial. Default is false.
fitness.function.tspsw.noveltysearch=false

# The number of iterations to record the output for when creating a novelty search behaviour. Default is 8. 
#fitness.function.tspsw.noveltysearch.record_length=

# If set to an integer > 0 then this many environments will be used to characterise an agents behaviour for novelty
# search. Defaults to fitness.function.tspsw.env.count.
#fitness.function.tspsw.noveltysearch.envs.count=

# If true then makes novelty search the only objective. Performance values are still calculated. Default is false. 
# If true then fitness.function.tspsw.noveltysearch is forced to true and fitness.function.tspsw.env.replacerate is 
# forced to 0, and fitness.function.tspsw.noveltysearch.envs.count is forced to fitness.function.tspsw.environment.count, 
# so that the same environments are used for calculating performance and novelty.
#fitness.function.tspsw.noveltysearch.only=



################
# Network arch #
################

ann.transcriber.class=com.ojcoleman.ahni.transcriber.NEATTranscriberBain
ann.transcriber.neuron.model=com.ojcoleman.bain.neuron.rate.SigmoidNeuronCollection
ann.transcriber.synapse.model=com.ojcoleman.bain.synapse.rate.FixedSynapseCollection

recurrent=best_guess

#input and output size determined by fitness function settings
#stimulus.size=6
#response.size=6

#ann.transcriber.bain.maxrecurrentcyclesearchlength=20
ann.transcriber.bain.executionmode=SEQ

#ann.transcriber.connection.weight.min=-2
ann.transcriber.connection.weight.max=32

# These HyperNEAT params allow using the fitness function to specify the input and output sizes. 
ann.hyperneat.depth=2
# input and output layer dimensions determined by fitness function
ann.hyperneat.width=f,f
ann.hyperneat.height=f,f

#############
# persistence
#############
persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.enable=false
persist.all=false
persist.champions=false
persist.last=false
persist.load.genotype=false
id.file=./db/id.xml
neat.id.file=./db/neatid.xml

##############
# presentation
##############
presentation.generate=false
presentation.dir=./nevt

#########
# logging
#########
# How often to produce a line in the log containing a brief summary of the current progress.
log.pergenerations=10

# FileAppenders with the name RunLog receive special treatment: for each run the output will be directed to a file 
# with the name specified by log4j.appender.RunLog.File in the directory [output.dir]/[run number]/
#log4j.rootLogger=INFO, C, RunLog
log4j.rootLogger=INFO, C, RunLog
log4j.appender.C=org.apache.log4j.ConsoleAppender
log4j.appender.RunLog=org.apache.log4j.FileAppender
log4j.appender.RunLog.File=log.txt
log4j.appender.C.layout=org.apache.log4j.PatternLayout
log4j.appender.RunLog.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%-5p %m%x%n
log4j.appender.RunLog.layout.ConversionPattern=%-5p %m%x%n

################
# other output #
################
output.dir=/home/data/temp/ahni/$(run.name)
# Whether to log the champ to a text file and/or image. N < 0 indicates no logging, N=0 indicates 
# only at the end of evolution, N > 0 indicates every N generations and after evolution has finished.
log.champ.tostring=100
log.champ.toimage=100
log.champ.evaluation=100


#######################################
# parameter tuning via ParameterTuner #
#######################################

parametertuner.totune=       add.neuron.mutation.rate, add.neuron.anywhere.mutation.rate, add.connection.mutation.rate, weight.mutation.rate, weight.mutation.std.dev
parametertuner.initialvalues=0.001,                    0.001,                             0.0015,                       0.5,                  0.5
parametertuner.minvalues=    0,                        0,                                 0,                            0,                    0.01
parametertuner.maxvalues=    1,                        1,                                 1,                            1,                    100
parametertuner.initialvalueadjustfactor=2
parametertuner.numruns=100
parametertuner.numgens=500
parametertuner.solvedperformance=0.98
parametertuner.htcondor=\
  executable = ../ahni.jar \n \
  jar_files = ../ahni.jar
